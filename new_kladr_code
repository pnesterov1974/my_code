// Altnames.cs
using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class AltNamesRecord
{
    public short Level { get; set; }
    public string Oldcode { get; set; }
    public string Newcode { get; set; }
}

public class AltNamesReader
{
    public AltNamesReader(string connectionString)
    {
        this.connectionString = connectionString;
    }

    private string connectionString = String.Empty;
    private string sql = @"
        SELECT [LEVEL],
               [OLDCODE],
               [NEWCODE]
        FROM [kladr].[dbo].[ALTNAMES];
    ";

    public List<AltNamesRecord> Data { get; set; }
    public DataTable TableSchema { get; set; }
    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
        {
            SqlConnection? conn = sender as SqlConnection;
            Console.Write("Изменено состояние подключения...\t");
            Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
            Console.WriteLine();
        }
    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(this.sql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }
    public void ReadData()
    {
        this.Data = new List<AltNamesRecord>();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlCommand cmd = new SqlCommand(this.sql, conn);
            try
            {
                conn.Open();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            AltNamesRecord rec = new AltNamesRecord
                            {
                                Level = (short)reader[0],
                                Oldcode = (string)reader[1],
                                Newcode = (string)reader[2],
                            };
                            this.Data.Add(rec);
                        }
                    }
                    else
                    {
                        Console.WriteLine("Данные отсутствуют...");
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект AltNames, загружено {this.Data.Count} записей");
            }
        }
    }

    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data);
    }

    public void SaveJsonData() {
        string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\altnames.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }

    public void SaveJsonSchema() {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\altnames_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}

//Doma
using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class DomaRecord
{
    public string Code { get; set; }
    public string? Name { get; set; }
    public string? Korp { get; set; }
    public string? Socr { get; set; }
    public string? Index { get; set; }
    public string? Gninmb { get; set; }
    public string? Uno { get; set; }
    public string? Ocatd { get; set; }
}

public class DomaReader
{
    public DomaReader(string connectionString)
    {
        this.connectionString = connectionString;
    }
    private string connectionString = String.Empty;
    private string sql = @"
        SELECT [CODE],
               [NAME],
               [KORP],
               [SOCR],
               [INDEX],
               [GNINMB],
               [UNO],
               [OCATD]
        FROM [dbo].[DOMA];
    ";
    public List<DomaRecord> Data { get; set; }
    public DataTable TableSchema { get; set; }
    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
        {
            SqlConnection conn = sender as SqlConnection;
            Console.Write("Изменено состояние подключения...\t");
            Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
            Console.WriteLine();
        }

    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(this.sql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }

    public void ReadData()
    {
        this.Data = new List<DomaRecord>();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlCommand cmd = new SqlCommand(this.sql, conn);
            try
            {
                conn.Open();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            DomaRecord rec = new DomaRecord
                            {
                                Code = (string)reader[0],
                                Name = Convert.IsDBNull(reader[1]) ? null : (string)reader[1],
                                Korp = Convert.IsDBNull(reader[2]) ? null : (string)reader[2],
                                Socr = Convert.IsDBNull(reader[3]) ? null :(string)reader[3],
                                Index = Convert.IsDBNull(reader[4]) ? null :(string)reader[4],
                                Gninmb = Convert.IsDBNull(reader[5]) ? null :(string)reader[5],
                                Uno = Convert.IsDBNull(reader[6]) ? null :(string)reader[6],
                                Ocatd = Convert.IsDBNull(reader[7]) ? null :(string)reader[7],
                            };
                            this.Data.Add(rec);
                        }
                    }
                    else
                    {
                        Console.WriteLine("Данные отсутствуют...");
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект doma, загружено {this.Data.Count} записей");
            }
        }
    }

    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data);
    }

    public void SaveJsonData() {
        string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\doma.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }

    public void SaveJsonSchema() {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\doma_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}

// Kladr

using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class KladrRecord
{
    public string Code { get; set; }
    public string? Name { get; set; }
    public string? Socr { get; set; }
    public string? Index { get; set; }
    public string? Gninmb { get; set; }
    public string? Uno { get; set; }
    public string? Ocatd { get; set; }
    public short Status { get; set; }
}

public class KladrReader
{
    public KladrReader(string connectionString)
    {
        this.connectionString = connectionString;
    }
    private string connectionString = String.Empty;
    private string sql = @"
        SELECT [CODE],
               [NAME],
               [SOCR],
               [INDEX],
               [GNINMB],
               [UNO],
               [OCATD],
               [STATUS]
        FROM [kladr].[dbo].[KLADR];
    ";
    public List<KladrRecord> Data { get; set; }
    public DataTable TableSchema { get; set; }
    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
        {
            SqlConnection conn = sender as SqlConnection;
            Console.Write("Изменено состояние подключения...\t");
            Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
            Console.WriteLine();
        }

    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(this.sql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }

    public void ReadData()
    {
        this.Data = new List<KladrRecord>();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlCommand cmd = new SqlCommand(this.sql, conn);
            try
            {
                conn.Open();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            KladrRecord rec = new KladrRecord
                            {
                                Code = (string)reader[0],
                                Name = Convert.IsDBNull(reader[1]) ? null : (string)reader[1],
                                Socr = Convert.IsDBNull(reader[2]) ? null :(string)reader[2],
                                Index = Convert.IsDBNull(reader[3]) ? null :(string)reader[3],
                                Gninmb = Convert.IsDBNull(reader[4]) ? null :(string)reader[4],
                                Uno = Convert.IsDBNull(reader[5]) ? null :(string)reader[5],
                                Ocatd = Convert.IsDBNull(reader[6]) ? null :(string)reader[6],
                                Status = (short)reader[7]
                            };
                            this.Data.Add(rec);
                        }
                    }
                    else
                    {
                        Console.WriteLine("Данные отсутствуют...");
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект Kladr, загружено {this.Data.Count} записей");
            }
        }
    }

    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data);
    }

    public void SaveJsonData() {
        string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\kladr.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }

    public void SaveJsonSchema() {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\kladr_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}

// KladrActual

using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class KladrActualReader
{
    public KladrActualReader(string connectionString)
    {
        this.connectionString = connectionString;
    }
    private string connectionString = String.Empty;
    public DataSet Data { get; set; }
    public DataTable TableSchema { get; set; }
    private string kladrObjectName = "kladr_actual";

    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
    {
        SqlConnection conn = sender as SqlConnection;
        Console.Write("Изменено состояние подключения...\t");
        Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
        Console.WriteLine();
    }

    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(SQLs.kladrActualSql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }
    public void ReadData()
    {
        this.Data = new DataSet();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlDataAdapter adapter = new SqlDataAdapter(SQLs.kladrActualSql, conn);
            try
            {
                adapter.Fill(this.Data);
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект {this.kladrObjectName}, загружено {this.Data.Tables[0].Rows.Count} записей");
            }
        }
    }
    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data);
    }
    public void SaveJsonData()
    {
        string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\{this.kladrObjectName}.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }

    public void SaveJsonSchema()
    {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\{this.kladrObjectName}_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}

// SocrBase

using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class SocrBaseRecord
{
    public short Level { get; set; }
    public string Scname { get; set; }
    public string SocrName { get; set; }
    public string KodTSt { get; set; }
}

public class SocrBaseReader
{
    public SocrBaseReader(string connectionString)
    {
        this.connectionString = connectionString;
    }

    private string connectionString = String.Empty;
    private string sql = @"
        SELECT [LEVEL],
               [SCNAME],
               [SOCRNAME],
               [KOD_T_ST]
        FROM [kladr].[dbo].[SOCRBASE];
    ";

    public List<SocrBaseRecord> Data { get; set; }
    public DataTable TableSchema { get; set; }
    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
        //set;
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
    {
        SqlConnection? conn = sender as SqlConnection;
        Console.Write("Изменено состояние подключения...\t");
        Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
        Console.WriteLine();
    }

    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(this.sql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }
    public void ReadData()
    {
        this.Data = new List<SocrBaseRecord>();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlCommand cmd = new SqlCommand(this.sql, conn);
            try
            {
                conn.Open();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            SocrBaseRecord rec = new SocrBaseRecord
                            {
                                Level = (short)reader[0],
                                Scname = (string)reader[1],
                                SocrName = (string)reader[2],
                                KodTSt = (string)reader[3]
                            };
                            this.Data.Add(rec);
                        }
                    }
                    else
                    {
                        Console.WriteLine("Данные отсутствуют...");
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект SocrBase, загружено {this.Data.Count} записей");
            }
        }
    }

    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data, Formatting.Indented);
    }
    
    public void SaveJsonData()
    {
        string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\socrbase.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }

    public void SaveJsonSchema()
    {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\socrbase_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}

namespace adodb
{
    public class SQLs
    {
        static public string streetsActualSql = @"
        SELECT [KladrCode],
               [KladrSubCode],
               [AreaCode],
               [DistrictCode],
               [CityCode],
               [TownCode],
               [StreetCode],
               [ActualityStatus],
               [KladrLevel],
               [KladrName],
               [KladrSocr],
               [KladrSocrName],
               [KladrIndex],
               [KladrGninmd],
               [KladrUno],
               [KLadrOkatd]
        FROM [kladr].[dbo].[v_street];
    ";

        static public string kladrActualSql = @"
        SELECT [KladrCode],
               [KladrSubCode],
               [AreaCode],
               [DistrictCode],
               [CityCode],
               [TownCode],
               [KladrLevel],
               [ActualityStatus],
               [KladrName],
               [KladrSocr],
               [KladrSocrName],
               [KladrIndex],
               [KladrGninmb],
               [KladrUno],
               [KladrOcatd],
               [KladrStatus]
        FROM [kladr].[dbo].[v_kladr];
    ";
    }
}

using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class StreetRecord
{
    public string Code { get; set; }
    public string? Name { get; set; }
    public string? Socr { get; set; }
    public string? Index { get; set; }
    public string? Gninmb { get; set; }
    public string? Uno { get; set; }
    public string? Ocatd { get; set; }
}

public class StreetReader
{
    public StreetReader(string connectionString)
    {
        this.connectionString = connectionString;
    }
    private string connectionString = String.Empty;
    private string sql = @"
        SELECT [CODE],
               [NAME],
               [SOCR],
               [INDEX],
               [GNINMB],
               [UNO],
               [OCATD]
        FROM [kladr].[dbo].[STREET];
    ";
    public List<StreetRecord> Data { get; set; }
    public DataTable TableSchema { get; set; }
    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
        {
            SqlConnection? conn = sender as SqlConnection;
            Console.Write("Изменено состояние подключения...\t");
            Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
            Console.WriteLine();
        }

    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(this.sql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }

    public void ReadData()
    {
        this.Data = new List<StreetRecord>();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlCommand cmd = new SqlCommand(this.sql, conn);
            try
            {
                conn.Open();
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            StreetRecord rec = new StreetRecord
                            {
                                Code = (string)reader[0],
                                Name = Convert.IsDBNull(reader[1]) ? null : (string)reader[1],
                                Socr = Convert.IsDBNull(reader[2]) ? null :(string)reader[2],
                                Index = Convert.IsDBNull(reader[3]) ? null :(string)reader[3],
                                Gninmb = Convert.IsDBNull(reader[4]) ? null :(string)reader[4],
                                Uno = Convert.IsDBNull(reader[5]) ? null :(string)reader[5],
                                Ocatd = Convert.IsDBNull(reader[6]) ? null :(string)reader[6],
                            };
                            this.Data.Add(rec);
                        }
                    }
                    else
                    {
                        Console.WriteLine("Данные отсутствуют...");
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект street, загружено {this.Data.Count} записей");
            }
        }
    }
    
    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data);
    }
    public void SaveJsonData() {
        string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\street.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }

    public void SaveJsonSchema() {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\street_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}

using System.Data;
using Microsoft.Data.SqlClient;
using Newtonsoft.Json;

namespace adodb;

public class StreetActualReader
{
    public StreetActualReader(string connectionString)
    {
        this.connectionString = connectionString;
    }
    private string connectionString = String.Empty;
    
    public DataSet Data { get; set; }
    public DataTable TableSchema { get; set; }
    private string streetsObjectName = "streets_actual";

    public string SchemaAsJson
    {
        get
        {
            this.ReadSchema();
            return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
        }
    }

    private void Connection_StateChange(object sender, System.Data.StateChangeEventArgs e)
    {
        SqlConnection conn = sender as SqlConnection;
        Console.Write("Изменено состояние подключения...\t");
        Console.Write("Database: " + conn.Database + "\tState: " + conn.State);
        Console.WriteLine();
    }
    public void ReadSchema()
    {
        this.TableSchema = new DataTable();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            using (SqlCommand cmd = new SqlCommand(SQLs.streetsActualSql, conn))
            {
                conn.Open();
                using (SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo))
                {
                    this.TableSchema = rdr.GetSchemaTable();
                }
                conn.Close();
            }
        }
    }
    public void ReadData()
    {
        this.Data = new DataSet();
        using (SqlConnection conn = new SqlConnection(this.connectionString))
        {
            conn.StateChange += this.Connection_StateChange;
            SqlDataAdapter adapter = new SqlDataAdapter(SQLs.streetsActualSql, conn);

            try
            {
                adapter.Fill(this.Data);
            }
            catch (Exception e)
            {
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(e.Message);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            finally
            {
                Console.WriteLine($"Объект {this.streetsObjectName}, загружено {this.Data.Tables[0].Rows.Count} записей");
            }
        }
    }
    public string GetJsonData()
    {
        this.ReadData();
        return JsonConvert.SerializeObject(this.Data);
    }
    public string GetJsonSchema()
    {
        this.ReadSchema();
        return JsonConvert.SerializeObject(this.TableSchema, Formatting.Indented);
    }
     public void SaveJsonData()
    {
    string dataJsonFilePath = Directory.GetCurrentDirectory() + $"\\{this.streetsObjectName}.json";
        File.WriteAllText(dataJsonFilePath, this.GetJsonData());
    }
    public void SaveJsonSchema()
    {
        string schemaJsonFilePath = Directory.GetCurrentDirectory() + $"\\{this.streetsObjectName}_schema.json";
        File.WriteAllText(schemaJsonFilePath, this.SchemaAsJson);
    }
}


using Microsoft.Extensions.Configuration;
using adodb;
using enums;
//using ConsoleTables;

internal class Program
{
    static string connStr = string.Empty;
    
    private static void Main(string[] args)
    {
        Console.Clear();
        Console.WriteLine("-= Подсистема KLADR =-");
        var config = new ConfigurationBuilder()
                         .AddJsonFile("appsettings.json")
                         .SetBasePath(Directory.GetCurrentDirectory())
                         .Build();
        connStr = config.GetConnectionString("DefaultConnection");          
        testAdo();
    }

    static void testOneTable(TargetTable targetTable)
    {
        switch (targetTable)
        {
            case TargetTable.SocrBase:
                {
                    SocrBaseReader dbr = new SocrBaseReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.AltNames:
                {
                    AltNamesReader dbr = new AltNamesReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.Kladr:
                {
                    KladrReader dbr = new KladrReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.Streets:
                {
                    StreetReader dbr = new StreetReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.Doma:
                {
                    DomaReader dbr = new DomaReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.KladrActual:
                {
                    KladrActualReader dbr = new KladrActualReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.StreetActual:
                {
                    StreetActualReader dbr = new StreetActualReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
                //default:{
                //    throw;
                //}
        }
    }

    static void testAdo()
    {
        // testOneTable(TargetTable.SocrBase);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.AltNames);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.Kladr);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.Streets);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.Doma);

        //testOneTable(TargetTable.KladrActual);
        //Console.WriteLine("===== ===== =====");
        testOneTable(TargetTable.StreetActual);
        Console.WriteLine("===== ===== =====");
        //Proc p = new Proc(connStr);
        //p.LaunchProc();
    }
}

using Microsoft.Extensions.Configuration;
using adodb;
using enums;
//using ConsoleTables;

internal class Program
{
    static string connStr = string.Empty;
    
    private static void Main(string[] args)
    {
        Console.Clear();
        Console.WriteLine("-= Подсистема KLADR =-");
        var config = new ConfigurationBuilder()
                         .AddJsonFile("appsettings.json")
                         .SetBasePath(Directory.GetCurrentDirectory())
                         .Build();
        connStr = config.GetConnectionString("DefaultConnection");          
        testAdo();
    }

    static void testOneTable(TargetTable targetTable)
    {
        switch (targetTable)
        {
            case TargetTable.SocrBase:
                {
                    SocrBaseReader dbr = new SocrBaseReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.AltNames:
                {
                    AltNamesReader dbr = new AltNamesReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.Kladr:
                {
                    KladrReader dbr = new KladrReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.Streets:
                {
                    StreetReader dbr = new StreetReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.Doma:
                {
                    DomaReader dbr = new DomaReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.KladrActual:
                {
                    KladrActualReader dbr = new KladrActualReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
            case TargetTable.StreetActual:
                {
                    StreetActualReader dbr = new StreetActualReader(connStr);
                    dbr.SaveJsonData();
                    dbr.SaveJsonSchema();
                    break;
                }
                //default:{
                //    throw;
                //}
        }
    }

    static void testAdo()
    {
        // testOneTable(TargetTable.SocrBase);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.AltNames);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.Kladr);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.Streets);
        // Console.WriteLine("===== ===== =====");
        // testOneTable(TargetTable.Doma);

        //testOneTable(TargetTable.KladrActual);
        //Console.WriteLine("===== ===== =====");
        testOneTable(TargetTable.StreetActual);
        Console.WriteLine("===== ===== =====");
        //Proc p = new Proc(connStr);
        //p.LaunchProc();
    }
}
